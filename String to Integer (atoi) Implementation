/* Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

 * The algorithm for myAtoi(string s) is as follows:

 * Read in and ignore any leading whitespace.
 * Check if the next character (if not already at the end of the string) is '-' or '+'.
 * Read this character in if it is either. This determines if the final result is negative or positive respectively.
 * Assume the result is positive if neither is present.
 * Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
 * Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32).
 * If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
 * If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.
 * Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
 * Return the integer as the final result.
 */
 
#include <limits.h>
unsigned int myAtoi(char * s){
    //variables
    unsigned int sign=1,number;
    unsigned int result=0;
    
    //trim the white spaces
    while( *s == ' ')
    {
        s++;
    }
    //check if there is a sign at the begining
    if(*s == '-')
    {
        sign = -1;
        s++;
    }
    else if(*s == '+')
    {
        sign = 1;
        s++;
    }
 
    if(s == NULL)
        return 0;
        
    while(*s >= 48 && *s <= 57){
    
  //another solution using switch case
         /* number = *s;
            switch(number)
            {
                case 48:
                number = 0;
                break;
                case 49:
                number = 1;
                break;
                case 50:
                number = 2;
                break;
                case 51:
                number = 3;
                break;
                case 52:
                number = 4;
                break;
                case 53:
                number = 5;
                break;
                case 54:
                number = 6;
                break;
                case 55:
                number = 7;
                break;
                case 56:
                number = 8;
                break;
                case 57:
                number = 9;
                break;
            } */
            
           //check if the number oversteps his bounds
            if((result == INT_MAX/10 && *s - '0'>INT_MAX%10) ||  (result > INT_MAX/10))
            {
                if(sign == 1)
                    return INT_MAX;
                else
                    return INT_MIN;
            }
            result = result*10 + (*s-'0');
            s++;
    }
    return result*sign;
}
